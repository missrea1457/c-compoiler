#part1
def nextstart():
    global start
    global forward
    if start == 0:
        start = 3
    elif start == 3:
        start = 8
    elif start == 8:
        start = 11
    elif start == 11:
        start = 13
    elif start == 13:
        start = 19
    elif start ==19:

        start = 21
    elif start == 21:
        start = 29
    elif start==29:
        start = 36
    forward -= 1
    return start
def get_token():
    global input
    global forward
    global lexem_begining
    global S_table
    global K_table
    word= input[lexem_begining:forward]
    if K_table.count(word) == 1:
        return (input[lexem_begining:forward],0)
    else:
        if S_table.count(word) == 1:
            return ("id",S_table.index(word))
        else:
            S_table.append(word)
            return ("id",S_table.index(word))
def nextchar():
    global input
    global forward
    if forward >= len(input):
        forward+=1
        return "$"
    forward += 1
    return input[forward - 1]
def nexttoken():
    global lexem_begining
    global forward
    global input
    global state
    global start
    state = 0
    start = 0
    while True:
        char = nextchar()
        if state == 0:
            if char=="$":
                return "$"
            while char == ' ':
                lexem_begining += 1
                char = nextchar()
            if char=="$":
                return "$"
            if char == '*':
                return ("*", "OP")
            elif char == "+":
                state = 1
            elif char == "-":
                state = 2
            elif char == "/":
                return ("/", "OP")
            elif char == "%":
                return ("%", "OP")
            elif char == "^":
                return ("^", "OP")
            else:
                state = nextstart()
        elif state == 1:
            if char == "+":
                return ("++", "OP")
            elif char == "=":
                return ("+=", "OP")
            else:
                forward -= 1
                return ("+", "OP")
        elif state == 2:
            if char == "-":
                return ("--", "OP")
            elif char == "=":
                return ("-=", "OP")
            else:
                forward -= 1
                return ("-", "OP")
        elif state == 3:
            if char == "<":
                state = 4
            elif char == ">":
                state = 5
            elif char == "!":
                state = 6
            elif char == "=":
                state = 7
            else:
                state = nextstart()
        elif state == 4:
            if char == "=":
                return ("<=", "OP")
            elif char == "<":
                state = 16
            else:
                forward -= 1
                return ("<", "OP")
        elif state == 5:
            if char == "=":
                return (">=", "OP")
            elif char == ">":
                state = 18
            else:
                forward -= 1
                return (">", "OP")
        elif state == 6:
            if char == "=":
                return ("!=", "OP")
            else:
                forward -= 1
                return ("!", "OP")
        elif state == 7:
            if char == "=":
                return ("==", "OP")
            else:
                forward -= 1
                return ("=", "OP")
        elif state == 8:
            if char == "|":
                state = 9
            elif char == "&":
                state = 10
            elif char == "~":
                return ("~", "OP")
            else:
                state = nextstart()
        elif state == 9:
            if char == "|":
                return ("||", "OP")
        elif state == 10:
            if char == "&":
                return ("&&", "OP")
        elif state == 11:
            if char == "\\":
                state = 12
            else:
                state = nextstart()
        elif state == 12:
            if char == "n":
                return ("\\n", "OP")
            elif char == "t":
                return ("\\t", "OP")
            elif char == "r":
                return ("\\r", "OP")
            else:
                forward -= 1
                return ("\\", "OP")
        elif state == 13:
            if char == "[":
                return ("[", "OP")
            elif char == "]":
                return ("]", "OP")
            elif char == "{":
                return ("{", "OP")
            elif char == "}":
                return ("}", "OP")
            elif char == "(":
                return ("(", "OP")
            elif char == ")":
                return (")", "OP")
            elif char == ",":
                return (",", "OP")
            elif char == ";":
                return (";", "OP")
            else:
                state = nextstart()
        elif state == 16:
            if char == "<":
                return ("<<<", "OP")
            else:
                forward -= 1
                return ("<<", "OP")
        elif state == 18:
            if char == ">":
                return (">>>", "OP")
            else:
                forward -= 1
                return (">>", "OP")
        elif state == 19:
            if char.isalpha() or char == '_':
                state = 20
            else:
                state = nextstart()
        elif state == 20:
            if char == "_" or char.isalnum():
                state = 20
            else:
                forward-=1
                return (get_token())
        elif state == 21:
            if char == "\"":
                state = 22
            else:
                state = nextstart()
        elif state == 22:
            if char == "\"":
                return ("string" , input[lexem_begining:forward])
            else:
                state = 22
        elif state == 29:

            if char.isdigit():
                state = 30
            else:
                state = nextstart()
        elif state == 30:
            if char == '.':
                state = 31
            elif char.isdigit():
                state = 30
            elif char == 'e':
                state = 33
            else:
                forward -= 1
                return ("num", input[lexem_begining:forward:forward])
        elif state == 31:
            if char.isdigit():
                state = 32
            else:
                forward = lexem_begining
                state = nextstart()
        elif state == 32:
            if char.isdigit():
                state = 32
            elif char == 'e':
                state = 33
            else:
                forward -= 1
                return ('num', input[lexem_begining:forward:forward])
        elif state == 33:
            if char == '+' or char == '-':
                state = 34
            else:
                forward -= 1
                state = 35
        elif state == 34:
            if char.isdigit():
                state = 35
            else:
                forward = lexem_begining
                state = nextstart()
        elif state == 35:
            if char.isdigit():
                state = 35
            else:
                forward -= 1
                return ('num', input[lexem_begining:forward:forward])
        elif state ==36:
            return "$"

# for ( i=0; i<0 ; i++)

S_table = []
K_table = ['main',
           'id',
           'num',
           'string',
           'character',
           'int',
           'char',
           'float',
           'double',
           'void',
           'cin',
           'cout',
           'while',
           'for',
           'if',
           'else',
           'break',
           'return']

forward = 0
lexem_begining = 0
input = "main () {cin >> x1 ; mycounter ++ ; v= u + 25; } int function(int x , float y ){return y1;} "
my_token=[]
while True:
    tk = nexttoken()
    if (tk =="$"):
        break
    my_token.append(tk)
    lexem_begining = forward
print(my_token)
f= open("token.txt","w+")
for i in my_token:
     f.write(f"{i[0]}\n")
f.close()

